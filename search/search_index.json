{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About {Voxel-Engine} Project Voxel-Engine is a custom 3D engine designed to render and simulate voxel-based environments\u2014virtual worlds constructed from volumetric pixels (\" voxels \").","title":"About {Voxel-Engine} Project"},{"location":"#about-voxel-engine-project","text":"Voxel-Engine is a custom 3D engine designed to render and simulate voxel-based environments\u2014virtual worlds constructed from volumetric pixels (\" voxels \").","title":"About {Voxel-Engine} Project"},{"location":"dev-side/about/","text":"Developer-Side Documentation Welcome to the developer-side documentation. The following pages are ready: - logging.md","title":"About Project"},{"location":"dev-side/about/#developer-side-documentation","text":"Welcome to the developer-side documentation. The following pages are ready: - logging.md","title":"Developer-Side Documentation"},{"location":"dev-side/logging/","text":"Logger System Documentation (For Contributors) This document provides in-depth technical documentation of the Core::Console logging system. It is intended for contributors who want to extend, maintain, or understand the internal workings of the logger. Overview The logger is a templated system for structured, color-coded console output. It supports: Multiple log levels (e.g., LOG , INF , ERR ) Configurable priority levels ( LOW , MED , HIG ) ANSI-styled banners and highlights Recursive variadic templates for flexible message formatting Custom styling with user-defined literals (e.g., _B , _H , _U ) This design avoids linking issues by defining all templated functions in the header. Logging Levels and Priorities (For Contributors) The logging system supports two orthogonal mechanisms: Levels and Priorities . As a contributor, it's important to understand their roles to extend or modify the logger consistently. TODO: impliment log level behaviour. \ud83d\udd39 Levels ( Core::Console::LogLevel ) Levels categorize the type or purpose of log messages: OFF \u2013 Disable logging LOG \u2013 General-purpose messages INF \u2013 Informational messages (e.g., service started) DBG \u2013 Debugging output WRN \u2013 Warnings ERR \u2013 Errors and failures These levels are useful for filtering and consistent formatting. \ud83d\udd39 Priorities ( Core::Console::LogPriority ) Priorities indicate the severity of a message: LOW \u2013 Non-urgent (default) MED \u2013 Moderately important HIG \u2013 Critical or high-urgency Log functions are templated by priority, allowing compile-time customization. Color and Style Configuration Each log level has predefined macros for banner label, foreground color, background color, and optional disabled fallback. Example for LOG : #define CORE_CONSOLE_BA_LOG \"LOG\" #define CORE_CONSOLE_FG_LOG 0xffffff00 #define CORE_CONSOLE_BG_LOG 0xffffff00 #define CORE_CONSOLE_XX_LOG CORE_CONSOLE_DISABLED These use 32-bit hex values ( 0xRRGGBBAA ) for color and can be mapped to ANSI escape sequences via helper functions. Log Output Implementation The following internal helpers define the structure and formatting of logs: \ud83d\udd38 __get_banner<P>() Creates the colored label for a log (e.g., [LOG] , [ERR] ) based on priority and color. \ud83d\udd38 __get_highlight<P>() Returns a stylized string with highlight formatting. \ud83d\udd38 __recurse_output(...) Template function that recursively prints any number of arguments to std::cout . Logging API These are the main entry points for writing log messages. All functions are templated with an optional priority: template<LogPriority P = LOW, typename T, typename... Args> void Log(T msg, Args... args); void Info(...) void Debug(...) void Warn(...) void Error(...) Example Usage Core::Console::Log(\"System boot complete.\"); Core::Console::Error<Core::Console::HIG>(\"Critical failure at\", moduleName); Styling Helpers To simplify inline styling, the system provides user-defined string literal operators: Literal Effect _B Bold _D Dim _U Underline _I Italics _H Highlight Example: std::cout << \"Warning: \"_B << \"Overheating detected!\" << std::endl; Adding New Log Levels or Styles To introduce a new log level: Add a new value in enum LogLevel Define corresponding macros ( CORE_CONSOLE_BA_XXX , FG , BG , XX ) Implement a new LogXXX() wrapper (optional) Add formatting logic if needed Design Goals Modular and extensible: Easy to define new log types Human-readable logs: ANSI color and consistent formatting Developer-friendly: Recursive variadic output and style literals Final Notes All output uses std::cout ; redirecting logs to a file or stream may require refactoring __recurse_output . Colors assume terminal support for ANSI codes. You can disable or override styles with CORE_CONSOLE_DISABLED . Contributions are welcome. Please follow the format and style conventions outlined above when extending the system. Future for Logging Module To support multi-threaded logging and improve traceability, the logging system is planned to evolve with the following architectural enhancements: \ud83e\udde9 Observer-based Output Handling. \ud83d\udce6 Observable Log Queue. \ud83e\uddf5 Thread-Aware Trace.","title":"Logging Module"},{"location":"dev-side/logging/#logger-system-documentation-for-contributors","text":"This document provides in-depth technical documentation of the Core::Console logging system. It is intended for contributors who want to extend, maintain, or understand the internal workings of the logger.","title":"Logger System Documentation (For Contributors)"},{"location":"dev-side/logging/#overview","text":"The logger is a templated system for structured, color-coded console output. It supports: Multiple log levels (e.g., LOG , INF , ERR ) Configurable priority levels ( LOW , MED , HIG ) ANSI-styled banners and highlights Recursive variadic templates for flexible message formatting Custom styling with user-defined literals (e.g., _B , _H , _U ) This design avoids linking issues by defining all templated functions in the header.","title":"Overview"},{"location":"dev-side/logging/#logging-levels-and-priorities-for-contributors","text":"The logging system supports two orthogonal mechanisms: Levels and Priorities . As a contributor, it's important to understand their roles to extend or modify the logger consistently. TODO: impliment log level behaviour.","title":"Logging Levels and Priorities (For Contributors)"},{"location":"dev-side/logging/#levels-coreconsoleloglevel","text":"Levels categorize the type or purpose of log messages: OFF \u2013 Disable logging LOG \u2013 General-purpose messages INF \u2013 Informational messages (e.g., service started) DBG \u2013 Debugging output WRN \u2013 Warnings ERR \u2013 Errors and failures These levels are useful for filtering and consistent formatting.","title":"\ud83d\udd39 Levels (Core::Console::LogLevel)"},{"location":"dev-side/logging/#priorities-coreconsolelogpriority","text":"Priorities indicate the severity of a message: LOW \u2013 Non-urgent (default) MED \u2013 Moderately important HIG \u2013 Critical or high-urgency Log functions are templated by priority, allowing compile-time customization.","title":"\ud83d\udd39 Priorities (Core::Console::LogPriority)"},{"location":"dev-side/logging/#color-and-style-configuration","text":"Each log level has predefined macros for banner label, foreground color, background color, and optional disabled fallback. Example for LOG : #define CORE_CONSOLE_BA_LOG \"LOG\" #define CORE_CONSOLE_FG_LOG 0xffffff00 #define CORE_CONSOLE_BG_LOG 0xffffff00 #define CORE_CONSOLE_XX_LOG CORE_CONSOLE_DISABLED These use 32-bit hex values ( 0xRRGGBBAA ) for color and can be mapped to ANSI escape sequences via helper functions.","title":"Color and Style Configuration"},{"location":"dev-side/logging/#log-output-implementation","text":"The following internal helpers define the structure and formatting of logs:","title":"Log Output Implementation"},{"location":"dev-side/logging/#__get_bannerp","text":"Creates the colored label for a log (e.g., [LOG] , [ERR] ) based on priority and color.","title":"\ud83d\udd38 __get_banner&lt;P&gt;()"},{"location":"dev-side/logging/#__get_highlightp","text":"Returns a stylized string with highlight formatting.","title":"\ud83d\udd38 __get_highlight&lt;P&gt;()"},{"location":"dev-side/logging/#__recurse_output","text":"Template function that recursively prints any number of arguments to std::cout .","title":"\ud83d\udd38 __recurse_output(...)"},{"location":"dev-side/logging/#logging-api","text":"These are the main entry points for writing log messages. All functions are templated with an optional priority: template<LogPriority P = LOW, typename T, typename... Args> void Log(T msg, Args... args); void Info(...) void Debug(...) void Warn(...) void Error(...)","title":"Logging API"},{"location":"dev-side/logging/#example-usage","text":"Core::Console::Log(\"System boot complete.\"); Core::Console::Error<Core::Console::HIG>(\"Critical failure at\", moduleName);","title":"Example Usage"},{"location":"dev-side/logging/#styling-helpers","text":"To simplify inline styling, the system provides user-defined string literal operators: Literal Effect _B Bold _D Dim _U Underline _I Italics _H Highlight Example: std::cout << \"Warning: \"_B << \"Overheating detected!\" << std::endl;","title":"Styling Helpers"},{"location":"dev-side/logging/#adding-new-log-levels-or-styles","text":"To introduce a new log level: Add a new value in enum LogLevel Define corresponding macros ( CORE_CONSOLE_BA_XXX , FG , BG , XX ) Implement a new LogXXX() wrapper (optional) Add formatting logic if needed","title":"Adding New Log Levels or Styles"},{"location":"dev-side/logging/#design-goals","text":"Modular and extensible: Easy to define new log types Human-readable logs: ANSI color and consistent formatting Developer-friendly: Recursive variadic output and style literals","title":"Design Goals"},{"location":"dev-side/logging/#final-notes","text":"All output uses std::cout ; redirecting logs to a file or stream may require refactoring __recurse_output . Colors assume terminal support for ANSI codes. You can disable or override styles with CORE_CONSOLE_DISABLED . Contributions are welcome. Please follow the format and style conventions outlined above when extending the system.","title":"Final Notes"},{"location":"dev-side/logging/#future-for-logging-module","text":"To support multi-threaded logging and improve traceability, the logging system is planned to evolve with the following architectural enhancements: \ud83e\udde9 Observer-based Output Handling. \ud83d\udce6 Observable Log Queue. \ud83e\uddf5 Thread-Aware Trace.","title":"Future for Logging Module"},{"location":"usr-side/begin/","text":"User-Side Docuentation Project is not at stage for documenting user-side functionalities.","title":"Getting Started"},{"location":"usr-side/begin/#user-side-docuentation","text":"Project is not at stage for documenting user-side functionalities.","title":"User-Side Docuentation"}]}